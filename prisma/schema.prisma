// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            String            @id
  owner              Owner?         
  owner_id           Int?
  email              String            @unique
  email_type         String
  nickname           String
  profile_image_url  String?
  created_at         DateTime?         @default(now())
  updated_at         DateTime?         @updatedAt
  reviews            Review[]
  cafe_likes         CafeLike[]
  recent_searches    RecentSearch[]
  prefered_beans     PreferedUserBean[]
}

model Cafe {
  cafe_id            Int               @id @default(autoincrement())
  owner              Owner?            @relation(fields: [owner_id], references: [owner_id])
  owner_id           Int?
  name               String
  latitude           Float
  longitude          Float
  address            String
  phone_number       String?
  operating_hour    String?
  created_at         DateTime?         @default(now())
  updated_at         DateTime?         @updatedAt
  images             CafeImage[]
  menu_items         MenuItem[]
  reviews            Review[]
  likes              CafeLike[]
  beans              CafeBean[]
  filters            CafeFilter[]
  operating_hours    CafeOperatingHour[]
}

model CafeImage {
  cafe_image_id      Int               @id @default(autoincrement())
  cafe               Cafe              @relation(fields: [cafe_id], references: [cafe_id])
  cafe_id            Int
  image_url          String            @db.VarChar(500)
  is_thumbnail       Boolean?
  is_menu            Boolean?
  created_at         DateTime?         @default(now())
}

model MenuItem {
  menu_item_id       Int               @id @default(autoincrement())
  cafe               Cafe              @relation(fields: [cafe_id], references: [cafe_id])
  cafe_id            Int
  name               String
  description        String?
  price              Float?
  image_url          String?           @db.VarChar(500)
  created_at         DateTime?         @default(now())
  updated_at         DateTime?         @updatedAt
}

model Bean {
  bean_id            Int               @id @default(autoincrement())
  roasting           Roasting          @relation(fields: [roasting_id], references: [roasting_id])
  roasting_id        Int?
  name               String
  is_specialty       Boolean?          @default(false)
  description        String?
  created_at         DateTime?         @default(now())
  updated_at         DateTime?         @updatedAt
  is_single_origin   Boolean           @default(false)
  single_origins     SingleOrigin[]
  cafe_beans         CafeBean[]
  cuffing_tags       CuffingTagBean[]
}

model Review {
  review_id          Int               @id @default(autoincrement())
  user               User              @relation(fields: [user_id], references: [user_id])
  user_id            String
  cafe               Cafe              @relation(fields: [cafe_id], references: [cafe_id])
  cafe_id            Int
  content            String?
  created_at         DateTime?         @default(now())
  updated_at         DateTime?         @updatedAt
  images             ReviewImage[]
  evaluations        CafeEvaluation[]
}

model ReviewImage {
  review_image_id    Int               @id @default(autoincrement())
  review             Review            @relation(fields: [review_id], references: [review_id])
  review_id          Int
  image_url          String
  created_at         DateTime?         @default(now())
}

model CafeLike {
  user               User              @relation(fields: [user_id], references: [user_id])
  user_id            String
  cafe               Cafe              @relation(fields: [cafe_id], references: [cafe_id])
  cafe_id            Int
  liked_at           DateTime?         @default(now())

  @@id([user_id, cafe_id])
}

model SearchTerm {
  search_term_id     Int               @id @default(autoincrement())
  term               String
  search_count       Int?
  last_searched_at   DateTime?
  created_at         DateTime?         @default(now())
  updated_at         DateTime?         @updatedAt
}

model RecentSearch {
  recent_search_id   Int               @id @default(autoincrement())
  user               User              @relation(fields: [user_id], references: [user_id])
  user_id            String
  search_term        String
  searched_at        DateTime?
}

model Owner {
  owner_id           Int               @id @default(autoincrement())
  user               User?             @relation(fields: [user_id], references: [user_id])
  user_id            String            @unique
  cafe               Cafe[]
  cafe_id            Int               @unique
  business_certification_number Int
}

model CafeBean {
  cafe               Cafe              @relation(fields: [cafe_id], references: [cafe_id])
  cafe_id            Int
  bean               Bean              @relation(fields: [bean_id], references: [bean_id])
  bean_id            Int
  added_at           DateTime          @default(now())

  @@id([cafe_id, bean_id])
}

model CafeEvaluation {
  evaluation_criteria EvaluationCriteria @relation(fields: [evaluation_criteria_id], references: [evaluation_criteria_id])
  evaluation_criteria_id Int
  review             Review?            @relation(fields: [review_id], references: [review_id])
  review_id          Int
  rating             Float

  @@id([evaluation_criteria_id, review_id])
}

model EvaluationCriteria {
  evaluation_criteria_id Int           @id @default(autoincrement())
  name                   String
  evaluations            CafeEvaluation[]
}

model FilterCriteria {
  filter_criteria_id Int               @id @default(autoincrement())
  name               String
  cafe_filters       CafeFilter[]
}

model CafeFilter {
  filter_criteria    FilterCriteria    @relation(fields: [filter_criteria_id], references: [filter_criteria_id])
  filter_criteria_id Int
  cafe               Cafe              @relation(fields: [cafe_id], references: [cafe_id])
  cafe_id            Int
  is_applied         Boolean           @default(false)

  @@id([filter_criteria_id, cafe_id])
}

model CafeOperatingHour {
  operating_hour_id  Int               @id @default(autoincrement())
  cafe               Cafe              @relation(fields: [cafe_id], references: [cafe_id])
  cafe_id            Int
  day_of_week        String
  open_time          DateTime?
  close_time         DateTime?
}

model SingleOrigin {
  single_id          Int               @id @default(autoincrement())
  bean               Bean              @relation(fields: [bean_id], references: [bean_id])
  bean_id            Int
  rating             Int
  aroma              Int
  acidity            Int
  sweetness          Int
  balance            Int
  body               Int
}

model PreferedUserBean {
  prefered_id        Int               @id @default(autoincrement())
  user               User              @relation(fields: [user_id], references: [user_id])
  user_id            String
  roasting           Roasting          @relation(fields: [roasting_id], references: [roasting_id])
  roasting_id        Int
  aroma              Int?
  acidity            Int?
  body               Int?
  country            String?
}

model CuffingTag {
  cuffing_tag_id     Int               @id @default(autoincrement())
  name               String
  beans              CuffingTagBean[]
}

model CuffingTagBean {
  bean               Bean              @relation(fields: [bean_id], references: [bean_id])
  bean_id            Int
  cuffing_tag        CuffingTag        @relation(fields: [cuffing_tag_id], references: [cuffing_tag_id])
  cuffing_tag_id     Int

  @@id([bean_id, cuffing_tag_id])
}

model Roasting {
  roasting_id        Int               @id @default(autoincrement())
  name               String
  description        String?
  beans              Bean[]
  prefered_beans     PreferedUserBean[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime @map("expires_at")

  @@map("session")
}